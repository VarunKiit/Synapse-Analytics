{
	"name": "1_spark_create_trip_data_green_gold_aggr",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "coursepool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ed182f66-af07-4019-a0e2-ca7883f18ebb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/413a2602-5c31-47ae-b73e-20d86737e454/resourceGroups/synapse-rg/providers/Microsoft.Synapse/workspaces/synapse-rg-wsn/bigDataPools/coursepool",
				"name": "coursepool",
				"type": "Spark",
				"endpoint": "https://synapse-rg-wsn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#set folder paths\r\n",
					"bronze_folder_path = 'abfss://nyc-taxi-data@synapsergan.dfs.core.windows.net/raw'\r\n",
					"silver_folder_path = 'abfss://nyc-taxi-data@synapsergan.dfs.core.windows.net/silver'\r\n",
					"gold_folder_path = 'abfss://nyc-taxi-data@synapsergan.dfs.core.windows.net/gold'"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Set spark config to get patitioned column year and month as strings ranter than integer\r\n",
					"spark.conf.set(\"spark.sql.sources.partitionColumnTypeInference.enabled\", \"false\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"--create database\r\n",
					"\r\n",
					"CREATE DATABASE IF NOT EXISTS nyc_taxi_spark\r\n",
					"LOCATION 'abfss://nyc-taxi-data@synapsergan.dfs.core.windows.net/gold';"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#read silver data to be processed\r\n",
					"trip_data_green_df = spark.read.parquet(f\"{silver_folder_path}/trip_data_green\")"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"trip_data_green_df.head()"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#perform the required aggregation\r\n",
					"#total trip count\r\n",
					"#total fare amount\r\n",
					"from pyspark.sql.functions import *\r\n",
					"trip_data_green_agg_df = trip_data_green_df \\\r\n",
					".groupBy(\"year\",\"month\", \"PULocationID\", \"DOLocationID\") \\\r\n",
					".agg(count(lit(1)).alias(\"total_trip_count\"), round(sum(\"fare_amount\"),2).alias(\"total_fare_amount\"))"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#write aggregated data to gold\r\n",
					"trip_data_green_agg_df.write.mode(\"overwrite\").partitionBy(\"year\", \"month\").format(\"parquet\").saveAsTable(\"nyc_taxi_ldw_spark.trip_data_green_aggr\")"
				],
				"execution_count": null
			}
		]
	}
}