{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-rg-wsn"
		},
		"synapse-rg-wsn-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-rg-wsn-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-rg-wsn.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"ls_serverless_sql_pool_db_nyc_taxi_ldw_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "synapse-rg-wsn-ondemand.sql.azuresynapse.net"
		},
		"ls_serverless_sql_pool_db_nyc_taxi_ldw_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "nyc_taxi_ldw"
		},
		"ls_synapsergan_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsergan.dfs.core.windows.net/"
		},
		"synapse-rg-wsn-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsergan.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Pl_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Trip Year and Month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "SELECT DISTINCT YEAR, MONTH\nFROM bronze.vw_trip_data_green_csv;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach Year and Month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Trip Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Trip Year and Month').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Delete Partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "silver/trip_data_green/year=@{item().YEAR}/month=@{item().MONTH}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[sp_silver_trip_data_green]",
										"storedProcedureParameters": {
											"MONTH": {
												"value": {
													"value": "@item().MONTH",
													"type": "Expression"
												},
												"type": "String"
											},
											"YEAR": {
												"value": {
													"value": "@item().YEAR",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Create Silver View",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Create Partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "USE nyc_taxi_ldw;"
											},
											{
												"type": "NonQuery",
												"text": "DROP VIEW IF EXISTS\nsilver.vw_trip_data_green;"
											},
											{
												"type": "NonQuery",
												"text": "CREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\nresult.filepath(1) AS YEAR,\nresult.filepath(2) AS MONTH,\nresult.*\nFROM OPENROWSET(\n    BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'PARQUET'\n)\nWITH(\n    VendorID INT,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),\n    RatecodeID INT,\n    PULocationID INT,\n    DOLocationID INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee INT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type INT,\n    trip_type INT,\n    congestion_surcharge FLOAT\n) AS [result];"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach folder path",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_folder_path_sp_name_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete_Silver_Folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "create_silver_table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete_Silver_Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().sp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_folder_path": {
						"type": "String",
						"defaultValue": "silver/taxi_zone"
					},
					"v_sp_name": {
						"type": "String",
						"defaultValue": "silver.sp_silver_taxi_zone"
					},
					"v_folder_path_sp_name_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/calendar",
								"sp_name": "silver.sp_calendar"
							},
							{
								"folder_path": "silver/taxi_zone",
								"sp_name": "silver.sp_silver_taxi_zone"
							},
							{
								"folder_path": "silver/trip_type",
								"sp_name": "silver.sp_silver_trip_type"
							},
							{
								"folder_path": "silver/vendor",
								"sp_name": "silver.sp_silver_vendor"
							},
							{
								"folder_path": "silver/rate_code",
								"sp_name": "silver.sp_silver_rate_code"
							},
							{
								"folder_path": "silver/payment_type",
								"sp_name": "silver.sp_silver_payment_type"
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "create a silver taxi zone parquet file from bronze layer ",
				"activities": [
					{
						"name": "Delete_Silver_Taxi_Zone_Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create_Silver_Taxi_zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete_Silver_Taxi_Zone_Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n   DROP EXTERNAL TABLE silver.taxi_zone;"
								},
								{
									"type": "NonQuery",
									"text": "CREATE EXTERNAL TABLE silver.taxi_zone\nWITH(\n    LOCATION = 'silver/taxi_zone',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT *\n FROM bronze.taxi_zone;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone_sp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "create a silver taxi zone parquet file from bronze layer ",
				"activities": [
					{
						"name": "Delete_Silver_Taxi_Zone_Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "create_silver_taxi_zone",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete_Silver_Taxi_Zone_Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[sp_silver_taxi_zone]"
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_nyc_taxi_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsergan",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsergan')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsergan",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/taxi_zone",
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsergan')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('ls_serverless_sql_pool_db_nyc_taxi_ldw_properties_typeProperties_server')]",
					"database": "[parameters('ls_serverless_sql_pool_db_nyc_taxi_ldw_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SystemAssignedManagedIdentity"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_synapsergan')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_synapsergan_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-rg-wsn-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-rg-wsn-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-rg-wsn-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-rg-wsn-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert json -> parquet rate_code\n\nCREATE EXTERNAL TABLE silver.rate_code\nWITH(\n    LOCATION = 'silver/rate_code',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT *\n  FROM OPENROWSET(\n       BULK 'raw/rate_code.json',\n       DATA_SOURCE = 'nyc_taxi_src',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0b'\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n  );\n\n  SELECT * FROM silver.rate_code;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_join_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- Checking if PULocationID has any null values\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nWHERE PULocationID IS NULL;\n\n-- Identify number of trips from each borough\nSELECT taxi_zone.Borough, COUNT(1) AS no_of_trips\nFROM OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS trip_data\n    JOIN\n    OPENROWSET(\n        BULK 'https://synapsergan.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2\n)\nWITH (\n    LocationID SMALLINT,\n    Borough VARCHAR(15),\n    Zone VARCHAR(50),\n    service_zone VARCHAR(15)\n) AS taxi_zone\nON trip_data.PULocationID = taxi_zone.LocationID\nGROUP BY taxi_zone.Borough\nORDER BY COUNT(1) DESC;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_Data_discovery_assignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- Identify the percentage of cash and credit card trips by borough\n\nSELECT\ntaxi_zone.Borough,\nSUM(CASE WHEN payment.Description = 'Cash' THEN 1 ELSE 0 END) AS Cash_trips,\nSUM(CASE WHEN payment.Description = 'Credit card' THEN 1 ELSE 0 END) AS Card_trips,\nCAST((SUM(CASE WHEN payment.Description = 'Cash' THEN 1 ELSE 0 END)/ CAST(COUNT(1) AS DECIMAL)) * 100 AS DECIMAL(5,2)) AS cash_trip_Percent,\nCAST((SUM(CASE WHEN payment.Description = 'Credit card' THEN 1 ELSE 0 END)/ CAST(COUNT(1) AS DECIMAL)) * 100 AS DECIMAL(5,2)) AS card_trip_Percent\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2021/month=01/**',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS trip_data\n    JOIN\nOPENROWSET(\n    BULK 'https://synapsergan.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2\n)\nWITH (\n    LocationID SMALLINT,\n    Borough VARCHAR(15),\n    Zone VARCHAR(50),\n    service_zone VARCHAR(15)\n) AS taxi_zone\nON trip_data.PULocationID = taxi_zone.LocationID\nJOIN \nOPENROWSET(\nBULK 'payment_type.json',\n       DATA_SOURCE = 'nyc_taxi_data_raw',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0a',\n       FIRSTROW = 1\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(payment_type SMALLINT ,\n       Description VARCHAR(20) '$.payment_type_desc'\n       ) as payment\nON payment.payment_type = trip_data.payment_type\nGROUP BY taxi_zone.Borough\n\n-- Joined result\nSELECT\n*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2021/month=01/**',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS trip_data\n    JOIN\nOPENROWSET(\n    BULK 'https://synapsergan.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2\n)\nWITH (\n    LocationID SMALLINT,\n    Borough VARCHAR(15),\n    Zone VARCHAR(50),\n    service_zone VARCHAR(15)\n) AS taxi_zone\nON trip_data.PULocationID = taxi_zone.LocationID\nJOIN \nOPENROWSET(\nBULK 'payment_type.json',\n       DATA_SOURCE = 'nyc_taxi_data_raw',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0a',\n       FIRSTROW = 1\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(payment_type SMALLINT ,\n       Description VARCHAR(20) '$.payment_type_desc'\n       ) as payment\nON payment.payment_type = trip_data.payment_type;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert json -> parquet rate_code\n\nCREATE EXTERNAL TABLE silver.payment_type\nWITH(\n    LOCATION = 'silver/payment_type',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT payment_type, Description\n  FROM OPENROWSET(\n       BULK 'raw/payment_type.json',\n       DATA_SOURCE = 'nyc_taxi_src',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0a'\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(payment_type SMALLINT ,\n       Description VARCHAR(20) '$.payment_type_desc'\n  ) as join_table;\n\n  SELECT * FROM silver.payment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert partition_folder -> single parquet file trip_data_green\nCREATE EXTERNAL TABLE silver.trip_data_green\nWITH(\n    LOCATION = 'silver/trip_data_green',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT *\nFROM bronze.trip_data_green_csv;\n\nSELECT * FROM silver.trip_data_green;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_create_silver_view_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- Create view from silver schema using OPENROWSET()\nDROP VIEW IF EXISTS\nsilver.vw_trip_data_green;\nCREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\nresult.filepath(1) AS YEAR,\nresult.filepath(2) AS MONTH,\nresult.*\nFROM OPENROWSET(\n    BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'PARQUET'\n)\nWITH(\n    VendorID INT,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),\n    RatecodeID INT,\n    PULocationID INT,\n    DOLocationID INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee INT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type INT,\n    trip_type INT,\n    congestion_surcharge FLOAT\n) AS [result];\n\nSELECT PULocationID, COUNT(1) FROM silver.vw_trip_data_green\nGROUP BY PULocationID\nHAVING COUNT(1) > 1;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- Final Golden Data for analysis : Business Requirement 1\n\nSELECT td.YEAR,\n       td.MONTH,\n       tz.Borough,\n       CONVERT(DATE, td.lpep_pickup_datetime) as trip_date,\n       cal.day_name as trip_day,\n       CASE WHEN cal.day_name IN('Saturday', 'Sunday') THEN 'Y' ELSE 'N' END AS trip_day_weekend_ind,\n       SUM(CASE WHEN pt.Description = 'Credit card' THEN 1 ELSE 0 END) AS card_trip_count,\n       SUM(CASE WHEN pt.Description = 'Cash' THEN 1 ELSE 0 END) AS cash_trip_count\nFROM silver.vw_trip_data_green td\nJOIN silver.taxi_zone tz \nON td.PULocationID = tz.LocationID\nJOIN silver.calendar cal\nON cal.date = CONVERT(DATE, td.lpep_pickup_datetime)\nJOIN silver.payment_type pt \nON td.payment_type = pt.payment_type\n\nWHERE YEAR = '2020'\nAND MONTH = '03'\nGROUP BY td.YEAR,\n       td.MONTH,\n       tz.Borough,\n       CONVERT(DATE, td.lpep_pickup_datetime),\n       cal.day_name;\n\n\n-- Final Golden Data for analysis : Business Requirement 2\n\nSELECT td.YEAR,\n       td.MONTH,\n       tz.Borough,\n       CONVERT(DATE, td.lpep_pickup_datetime) as trip_date,\n       cal.day_name as trip_day,\n       CASE WHEN cal.day_name IN('Saturday', 'Sunday') THEN 'Y' ELSE 'N' END AS trip_day_weekend_ind,\n       SUM(CASE WHEN pt.Description = 'Credit card' THEN 1 ELSE 0 END) AS card_trip_count,\n       SUM(CASE WHEN pt.Description = 'Cash' THEN 1 ELSE 0 END) AS cash_trip_count,\n       SUM(CASE WHEN tt.trip_type_desc = 'Street-hail' THEN 1 ELSE 0 END) as street_hall_trip_count,\n       SUM(CASE WHEN tt.trip_type_desc = 'Dispatch' THEN 1 ELSE 0 END) as dispatch_trip_count,\n       SUM(td.trip_distance) as trip_distance,\n       SUM(DATEDIFF(MINUTE, td.lpep_pickup_datetime, td.lpep_dropoff_datetime)) as trip_duration,\n       SUM(td.fare_amount) as fare_amount\nFROM silver.vw_trip_data_green td\nJOIN silver.taxi_zone tz\nON td.PULocationID = tz.LocationID\nJOIN silver.calendar cal\nON cal.date = CONVERT(DATE, td.lpep_pickup_datetime)\nJOIN silver.payment_type pt\nON td.payment_type = pt.payment_type\nJOIN silver.trip_type tt\nON td.trip_type = tt.trip_type\nWHERE td.YEAR = '2020'\nAND td.MONTH = '03'\nGROUP BY td.YEAR,\n         td.MONTH,\n         tz.Borough,\n         CONVERT(DATE, td.lpep_pickup_datetime),\n         cal.day_name\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_create_gold_view_tip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- Create view from gold schema using OPENROWSET()\nDROP VIEW IF EXISTS gold.vw_trip_data_green\nGO\n\nCREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\nresult.filepath(1) AS YEAR,\nresult.filepath(2) AS MONTH,\nresult.*\nFROM OPENROWSET(\n    BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'PARQUET'\n)\nWITH(\n    Borough VARCHAR(15),\n    trip_date DATE,\n    trip_day VARCHAR(10),\n    trip_day_weekend_ind CHAR(1),\n    card_trip_count INT,\n    cash_trip_count INT,\n    street_hall_trip_count INT,\n    dispatch_trip_count INT,\n    trip_distance FLOAT,\n    trip_duration INT,\n    fare_amount FLOAT\n) AS [result]\nGO\n\nSELECT *\nFROM gold.vw_trip_data_green;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_database_schemas')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "CREATE DATABASE nyc_taxi_ldw;\n\nUSE nyc_taxi_ldw;\n\nALTER DATABASE nyc_taxi_ldw \nCOLLATE Latin1_General_100_BIN2_UTF8;\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- Header set to true and read top 10 rows, field and row terminators are by default\nSELECT\n    TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsergan.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n-- Examine data types for the columns\n    EXEC sp_describe_first_result_set N'SELECT\n    TOP 10 *\nFROM\n    OPENROWSET(\n        BULK ''https://synapsergan.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n    ) AS [result]'\n\n-- Find max lengths of columns\nselect MAX(LEN(LocationID)),\n       MAX(LEN(Borough)),\n       MAX(LEN(Zone)),\n       MAX(LEN(service_zone))\nfrom \n    OPENROWSET(\n        BULK 'https://synapsergan.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n-- Use WITH clause to provide explicit data types\nselect *\nfrom \n    OPENROWSET(\n        BULK 'https://synapsergan.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n)\nWITH (\n    LocationID SMALLINT,\n    Borough VARCHAR(15),\n    Zone VARCHAR(50),\n    service_zone VARCHAR(15)\n) AS [result]\n\n-- Examine collation in database\nSELECT name, collation_name from sys.databases;\n\n-- Change collation in our data\nselect *\nfrom \n    OPENROWSET(\n        BULK 'https://synapsergan.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n)\nWITH (\n    LocationID SMALLINT,\n    Borough VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n    Zone VARCHAR(50) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n    service_zone VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n) AS [result]\n\n-- Create database\nCREATE DATABASE nyc_taxi_discovery;\n-- Use database\nUSE nyc_taxi_discovery;\n\n-- Changing collation in database iteself\nALTER DATABASE nyc_taxi_discovery COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n\n-- Read data from a subset of colmuns\nselect *\nfrom \n    OPENROWSET(\n        BULK 'https://synapsergan.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n)\nWITH (\n    Borough VARCHAR(15) 2,\n    Zone VARCHAR(50) 3\n) AS [result]\n\n-- Create external Data Source\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data_raw\nWITH(\n    LOCATION = 'https://synapsergan.dfs.core.windows.net/nyc-taxi-data/raw'\n)\n\n-- Read file using data source\nselect *\nfrom \n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n)\nWITH (\n    LocationID SMALLINT ,\n    Borough VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8 ,\n    Zone VARCHAR(50) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n    service_zone VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n) AS [result]\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_sp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/sp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- Creating partitioned files parquet from partitioned files csv View using stored procedures\nCREATE OR ALTER PROCEDURE silver.sp_silver_trip_data_green\n@YEAR VARCHAR(4),\n@MONTH VARCHAR(2)\nAS\nBEGIN \n  \n  DECLARE @create_sql_start NVARCHAR(MAX),\n          @drop_sql_start NVARCHAR(MAX);\n\n  SET @create_sql_start =\n      'CREATE EXTERNAL TABLE silver.trip_data_green_' + @YEAR + '_' + @MONTH +\n' WITH(\n    LOCATION = ''silver/trip_data_green/year=' + @YEAR + '/month=' + @MONTH + ''',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT *\nFROM bronze.vw_trip_data_green_csv\nWHERE YEAR = ''' + @YEAR + '''\nAND MONTH = ''' + @MONTH + '''';\n\n  EXEC sp_executesql @create_sql_start;\n\n  SET @drop_sql_start =\n      'DROP EXTERNAL TABLE silver.trip_data_green_' + @YEAR + '_' + @MONTH;\n  \n  EXEC sp_executesql @drop_sql_start;\nEND;\n\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2020',@MONTH = '01'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2020',@MONTH = '02'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2020',@MONTH = '03'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2020',@MONTH = '04'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2020',@MONTH = '05'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2020',@MONTH = '06'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2020',@MONTH = '07'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2020',@MONTH = '08'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2020',@MONTH = '09'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2020',@MONTH = '10'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2020',@MONTH = '11'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2020',@MONTH = '12'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2021',@MONTH = '01'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2021',@MONTH = '02'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2021',@MONTH = '03'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2021',@MONTH = '04'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2021',@MONTH = '05'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2021',@MONTH = '06'\nEXEC silver.sp_silver_trip_data_green\n@YEAR = '2021',@MONTH = '07'\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_external_data_source')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_src\nWITH(\n    LOCATION = 'https://synapsergan.dfs.core.windows.net/nyc-taxi-data'\n);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nselect * from\nOPENROWSET( BULK 'calendar.csv',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'CSV',\n            PARSER_VERSION = '2.0',\n            HEADER_ROW = TRUE\n            ) AS cal\n\nEXEC sp_describe_first_result_set N'select * from\nOPENROWSET( BULK ''calendar.csv'',\n            DATA_SOURCE = ''nyc_taxi_data_raw'',\n            FORMAT = ''CSV'',\n            PARSER_VERSION = ''2.0'',\n            HEADER_ROW = TRUE\n            ) AS cal'\n\n-- Change Data types\nselect * from\nOPENROWSET( BULK 'calendar.csv',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'CSV',\n            PARSER_VERSION = '2.0',\n            HEADER_ROW = TRUE\n)\nWITH(\n date_key INT,\n date DATE,\t\n year SMALLINT,\t\n month TINYINT,\n day TINYINT,\n day_name VARCHAR(10),\n day_of_year SMALLINT,\t\n week_of_month TINYINT,\t\n week_of_year TINYINT,\t\n month_name VARCHAR(10),\t\n year_month INT,\t\n year_week INT\n)AS cal;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_sp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/sp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- Create Stored Procedure for business reqvirement 1\n\nCREATE OR ALTER PROCEDURE gold.sp_gold_trip_data_green\n@YEAR VARCHAR(4),\n@MONTH VARCHAR(2)\nAS\nBEGIN \n  \n  DECLARE @create_sql_start NVARCHAR(MAX),\n          @drop_sql_start NVARCHAR(MAX);\n\n  SET @create_sql_start =\n      'CREATE EXTERNAL TABLE gold.trip_data_green_' + @YEAR + '_' + @MONTH +\n' WITH(\n    LOCATION = ''gold/trip_data_green/year=' + @YEAR + '/month=' + @MONTH + ''',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT td.YEAR,\n       td.MONTH,\n       tz.Borough,\n       CONVERT(DATE, td.lpep_pickup_datetime) as trip_date,\n       cal.day_name as trip_day,\n       CASE WHEN cal.day_name IN(''Saturday'', ''Sunday'') THEN ''Y'' ELSE ''N'' END AS trip_day_weekend_ind,\n       SUM(CASE WHEN pt.Description = ''Credit card'' THEN 1 ELSE 0 END) AS card_trip_count,\n       SUM(CASE WHEN pt.Description = ''Cash'' THEN 1 ELSE 0 END) AS cash_trip_count\nFROM silver.vw_trip_data_green td\nJOIN silver.taxi_zone tz \nON td.PULocationID = tz.LocationID\nJOIN silver.calendar cal\nON cal.date = CONVERT(DATE, td.lpep_pickup_datetime)\nJOIN silver.payment_type pt \nON td.payment_type = pt.payment_type\n\nWHERE YEAR = ''' + @YEAR + '''\nAND MONTH = ''' + @MONTH + '''\nGROUP BY td.YEAR,\n       td.MONTH,\n       tz.Borough,\n       CONVERT(DATE, td.lpep_pickup_datetime),\n       cal.day_name  ';\n\n  EXEC sp_executesql @create_sql_start;\n\n  SET @drop_sql_start =\n      'DROP EXTERNAL TABLE gold.trip_data_green_' + @YEAR + '_' + @MONTH;\n  \n  EXEC sp_executesql @drop_sql_start;\nEND;\n\n-- Create Stored Procedure for business reqvirement 2\n\nCREATE OR ALTER PROCEDURE gold.sp_gold_trip_data_green\n@YEAR VARCHAR(4),\n@MONTH VARCHAR(2)\nAS\nBEGIN \n  \n  DECLARE @create_sql_start NVARCHAR(MAX),\n          @drop_sql_start NVARCHAR(MAX);\n\n  SET @create_sql_start =\n      'CREATE EXTERNAL TABLE gold.trip_data_green_' + @YEAR + '_' + @MONTH +\n' WITH(\n    LOCATION = ''gold/trip_data_green/year=' + @YEAR + '/month=' + @MONTH + ''',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT td.YEAR,\n       td.MONTH,\n       tz.Borough,\n       CONVERT(DATE, td.lpep_pickup_datetime) as trip_date,\n       cal.day_name as trip_day,\n       CASE WHEN cal.day_name IN(''Saturday'', ''Sunday'') THEN ''Y'' ELSE ''N'' END AS trip_day_weekend_ind,\n       SUM(CASE WHEN pt.Description = ''Credit card'' THEN 1 ELSE 0 END) AS card_trip_count,\n       SUM(CASE WHEN pt.Description = ''Cash'' THEN 1 ELSE 0 END) AS cash_trip_count,\n       SUM(CASE WHEN tt.trip_type_desc = ''Street-hail'' THEN 1 ELSE 0 END) as street_hall_trip_count,\n       SUM(CASE WHEN tt.trip_type_desc = ''Dispatch'' THEN 1 ELSE 0 END) as dispatch_trip_count,\n       SUM(td.trip_distance) as trip_distance,\n       SUM(DATEDIFF(MINUTE, td.lpep_pickup_datetime, td.lpep_dropoff_datetime)) as trip_duration,\n       SUM(td.fare_amount) as fare_amount\nFROM silver.vw_trip_data_green td\nJOIN silver.taxi_zone tz\nON td.PULocationID = tz.LocationID\nJOIN silver.calendar cal\nON cal.date = CONVERT(DATE, td.lpep_pickup_datetime)\nJOIN silver.payment_type pt\nON td.payment_type = pt.payment_type\nJOIN silver.trip_type tt\nON td.trip_type = tt.trip_type\nWHERE td.YEAR = ''' + @YEAR + '''\nAND td.MONTH = ''' + @MONTH + '''\nGROUP BY td.YEAR,\n         td.MONTH,\n         tz.Borough,\n         CONVERT(DATE, td.lpep_pickup_datetime),\n         cal.day_name';\n\n  EXEC sp_executesql @create_sql_start;\n\n  SET @drop_sql_start =\n      'DROP EXTERNAL TABLE gold.trip_data_green_' + @YEAR + '_' + @MONTH;\n  \n  EXEC sp_executesql @drop_sql_start;\nEND;\n\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2020',@MONTH = '01';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2020',@MONTH = '02';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2020',@MONTH = '03';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2020',@MONTH = '04';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2020',@MONTH = '05';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2020',@MONTH = '06';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2020',@MONTH = '07';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2020',@MONTH = '08';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2020',@MONTH = '09';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2020',@MONTH = '10';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2020',@MONTH = '11';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2020',@MONTH = '12';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2021',@MONTH = '01';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2021',@MONTH = '02';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2021',@MONTH = '03';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2021',@MONTH = '04';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2021',@MONTH = '05';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2021',@MONTH = '06';\nEXEC gold.sp_gold_trip_data_green\n@YEAR = '2021',@MONTH = '07';\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_external_file_formats')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- Create CSV file formats\n\nCREATE EXTERNAL FILE FORMAT csv_file_format\nWITH(\n    FORMAT_TYPE = DELIMITEDTEXT,\n    FORMAT_OPTIONS(\n        FIELD_TERMINATOR = ',',\n        STRING_DELIMITER = '\"',\n        FIRST_ROW = 2,\n        USE_TYPE_DEFAULT = FALSE,\n        ENCODING = 'UTF8',\n        PARSER_VERSION = '2.0'\n    )\n);\n\nCREATE EXTERNAL FILE FORMAT csv_file_format_pv1\nWITH(\n    FORMAT_TYPE = DELIMITEDTEXT,\n    FORMAT_OPTIONS(\n        FIELD_TERMINATOR = ',',\n        STRING_DELIMITER = '\"',\n        FIRST_ROW = 2,\n        USE_TYPE_DEFAULT = FALSE,\n        ENCODING = 'UTF8',\n        PARSER_VERSION = '1.0'\n    )\n)\n\n-- Create TSV file formats\n\nCREATE EXTERNAL FILE FORMAT tsv_file_format\nWITH(\n    FORMAT_TYPE = DELIMITEDTEXT,\n    FORMAT_OPTIONS(\n        FIELD_TERMINATOR = '\\t',\n        STRING_DELIMITER = '\"',\n        FIRST_ROW = 2,\n        USE_TYPE_DEFAULT = FALSE,\n        PARSER_VERSION = '2.0',\n        ENCODING = 'UTF8'\n    )\n);\n\n-- DROP EXTERNAL FILE FORMAT parquet_file_format;\n\nCREATE EXTERNAL FILE FORMAT tsv_file_format_pv1\nWITH(\n    FORMAT_TYPE = DELIMITEDTEXT,\n    FORMAT_OPTIONS(\n        FIELD_TERMINATOR = '\\t',\n        STRING_DELIMITER = '\"',\n        FIRST_ROW = 2,\n        USE_TYPE_DEFAULT = FALSE,\n        PARSER_VERSION = '1.0',\n        ENCODING = 'UTF8'\n    )\n);\n\n-- Create PARQUET file formats\nCREATE EXTERNAL FILE FORMAT parquet_file_format\nWITH(\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n);\n\n-- Create DELTA file formats\nCREATE EXTERNAL FILE FORMAT delta_file_format\nWITH(\n    FORMAT_TYPE = DELTA,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n);\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_payement_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- Read JSON file using JSON_VALUE AND OPENROWSET version 1.0\nSELECT CAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) payment_type,\n       CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') AS VARCHAR(15)) payment_type_desc\n  FROM OPENROWSET(\n       BULK 'payment_type.json',\n       DATA_SOURCE = 'nyc_taxi_data_raw',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0a'\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type;\n\n-- Read JSON file using OPENJSON() and OPENROWSET() \nSELECT payment_type, Description\n  FROM OPENROWSET(\n       BULK 'payment_type.json',\n       DATA_SOURCE = 'nyc_taxi_data_raw',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0a'\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(payment_type SMALLINT ,\n       Description VARCHAR(20) '$.payment_type_desc'\n  ) as join_table\n\n-- Read data from JSON with arrays using JSON_VALUE\nSELECT CAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) payment_type,\n       CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc[0].value') AS VARCHAR(15)) payment_type_desc_0,\n       CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc[1].value') AS VARCHAR(15)) payment_type_desc_1\n  FROM OPENROWSET(\n       BULK 'payment_type_array.json',\n       DATA_SOURCE = 'nyc_taxi_data_raw',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0a'\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type;\n\n-- Read data from JSON with arrays using OPENJSON()\nSELECT *\n  FROM OPENROWSET(\n       BULK 'payment_type_array.json',\n       DATA_SOURCE = 'nyc_taxi_data_raw',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0a'\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(payment_type SMALLINT ,\n       payment_type_desc NVARCHAR(MAX) AS JSON\n  ) \n  CROSS APPLY OPENJSON(payment_type_desc)\n  WITH(sub_type SMALLINT,\n       value VARCHAR(20)\n  );\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_sp_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/sp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert csv -> parquet \n-- create stored procedure\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_taxi_zone\nAS\nBEGIN\n    IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n        DROP EXTERNAL TABLE silver.taxi_zone;\n\n    CREATE EXTERNAL TABLE silver.taxi_zone\n        WITH(\n            LOCATION = 'silver/taxi_zone',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = parquet_file_format\n            )\n    AS\n    SELECT *\n    FROM bronze.taxi_zone;\n\nEND;\n\n-- seleect statement\n\nSELECT * from silver.taxi_zone\nWHERE LocationID = 43;\n\n -- DROP EXTERNAL TABLE silver.taxi_zone;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_bronze_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create external table taxi_zone\nCREATE EXTERNAL TABLE bronze.taxi_zone\n(\n    LocationID SMALLINT,\n    Borough VARCHAR(15),\n    Zone VARCHAR(50),\n    service_zone VARCHAR(15)\n)\nWITH(\n    LOCATION = 'raw/taxi_zone.csv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format\n);\n\nSELECT * FROM bronze.taxi_zone;\n\n-- create external table calendar\nCREATE EXTERNAL TABLE bronze.calendar\n(\n date_key INT,\n date DATE,\t\n year SMALLINT,\t\n month TINYINT,\n day TINYINT,\n day_name VARCHAR(10),\n day_of_year SMALLINT,\t\n week_of_month TINYINT,\t\n week_of_year TINYINT,\t\n month_name VARCHAR(10),\t\n year_month INT,\t\n year_week INT\n)\nWITH(\n    LOCATION = 'raw/calendar.csv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format\n)\n\nSELECT * FROM bronze.calendar;\n\n-- create external table vendor\nCREATE EXTERNAL TABLE bronze.vendor(\n    vendor_id TINYINT,\n    vendor_name VARCHAR(50)\n)\nWITH(\n    LOCATION = 'raw/vendor.csv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/vendor'\n);\n\nSELECT * FROM bronze.vendor;\n\n-- create external table trip_type\nCREATE EXTERNAL TABLE bronze.trip_type(\n    trip_type TINYINT,\n    trip_type_desc VARCHAR(50)\n)\nWITH(\n    LOCATION = 'raw/trip_type.tsv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = tsv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/trip_type'\n)\n\nSELECT * FROM bronze.trip_type;\n\n-- create external table trip_data_green_csv\nCREATE EXTERNAL TABLE bronze.trip_data_green_csv(\n    VendorID INT,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),\n    RatecodeID INT,\n    PULocationID INT,\n    DOLocationID INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee INT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type INT,\n    trip_type INT,\n    congestion_surcharge FLOAT\n)\nWITH(\n    LOCATION = 'raw/trip_data_green_csv/**',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = '/rejected/trip_daa_green_csv'\n);\n\nSELECT TOP 100 * FROM bronze.trip_data_green_csv;\n\n-- create external table trip_data_green_parquet\nCREATE EXTERNAL TABLE bronze.trip_data_green_parquet(\n    VendorID INT,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),\n    RatecodeID INT,\n    PULocationID INT,\n    DOLocationID INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee INT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type INT,\n    trip_type INT,\n    congestion_surcharge FLOAT\n)\nWITH(\n    LOCATION = 'raw/trip_data_green_parquet/**',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n);\n\nSELECT TOP 100 * FROM bronze.trip_data_green_parquet;\n\n-- create external table trip_data_green_delta\nCREATE EXTERNAL TABLE bronze.trip_data_green_delta(\n    VendorID INT,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),\n    RatecodeID INT,\n    PULocationID INT,\n    DOLocationID INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee INT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type INT,\n    trip_type INT,\n    congestion_surcharge FLOAT\n)\nWITH(\n    LOCATION = 'raw/trip_data_green_delta',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = delta_file_format\n);\n\nSELECT TOP 100 * FROM bronze.trip_data_green_delta;\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_explore_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nSELECT *\n  FROM OPENROWSET(\n       BULK 'rate_code.json',\n       DATA_SOURCE = 'nyc_taxi_data_raw',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0b'\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n  );\n\n-- Process multifile JSON\nSELECT *\nFROM OPENROWSET(\n       BULK 'rate_code_multi_line.json',\n       DATA_SOURCE = 'nyc_taxi_data_raw',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0b'\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n  );\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_sp_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/sp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert csv -> parquet calendar\n-- create stored procedure\n\nCREATE OR ALTER PROCEDURE silver.sp_calendar\nAS\nBEGIN\n    IF OBJECT_ID('silver.calendar') IS NOT NULL\n        DROP EXTERNAL TABLE silver.calendar;\n    CREATE EXTERNAL TABLE silver.calendar\n    WITH(\n     LOCATION = 'silver/calendar',\n     DATA_SOURCE = nyc_taxi_src,\n     FILE_FORMAT = parquet_file_format\n)\n AS\n SELECT * \n FROM bronze.calendar;\nEND;\n\nSELECT TOP 100 * FROM silver.calendar;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create view vw_rate_code\nCREATE VIEW bronze.vw_rate_code\nAS\nSELECT *\n  FROM OPENROWSET(\n       BULK 'raw/rate_code.json',\n       DATA_SOURCE = 'nyc_taxi_src',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0b'\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n  );\n\n  SELECT * from bronze.vw_rate_code;\n\n-- create view vw_payment_type\nCREATE VIEW bronze.vw_payment_type\nAS\nSELECT payment_type, Description\n  FROM OPENROWSET(\n       BULK 'raw/payment_type.json',\n       DATA_SOURCE = 'nyc_taxi_src',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0a'\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(payment_type SMALLINT ,\n       Description VARCHAR(20) '$.payment_type_desc'\n  ) as join_table\n\n  SELECT * FROM bronze.vw_payment_type;\n\n-- Create view for trip_data_green (Partition Pruning)\nCREATE VIEW bronze.vw_trip_data_green_csv\nAS\nSELECT\nresult.filepath(1) AS YEAR,\nresult.filepath(2) AS MONTH,\nresult.*\nFROM OPENROWSET(\n    BULK 'raw/trip_data_green_csv/year=*/month=*/*.csv',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n)\nWITH(\n    VendorID INT,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag CHAR(1),\n    RatecodeID INT,\n    PULocationID INT,\n    DOLocationID INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee INT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type INT,\n    trip_type INT,\n    congestion_surcharge FLOAT\n) AS [result];\n\nSELECT TOP 100 *\nFROM bronze.vw_trip_data_green_csv\nWHERE YEAR = '2021' and MONTH = '03';\n\n-- DROP VIEW bronze.vw_trip_data_green_csv;\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_explore_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- Select data from file\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/green_tripdata_2020-01.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n-- Select data from folders\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n-- Select data from sub folders\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/**',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n-- Meta data functions - filename()\nSELECT\n    result.filename() as File_name,\n    COUNT(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nGROUP BY result.filename()\nORDER BY result.filename();\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_sp_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/sp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert csv -> parquet trip_type\n-- CREATE STORED PROCEDURE\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_trip_type\nAS\nBEGIN\n    IF OBJECT_ID('silver.trip_type') IS NOT NULL\n        DROP EXTERNAL TABLE silver.trip_type;\n    CREATE EXTERNAL TABLE silver.trip_type\n    WITH(\n     LOCATION = 'silver/trip_type',\n     DATA_SOURCE = nyc_taxi_src,\n     FILE_FORMAT = parquet_file_format\n)\n AS\n SELECT * \n FROM bronze.trip_type;\nEND;\n\nSELECT * FROM silver.trip_type;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert csv -> parquet \nIF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n   DROP EXTERNAL TABLE silver.taxi_zone\nGO\n\nCREATE EXTERNAL TABLE silver.taxi_zone\nWITH(\n    LOCATION = 'silver/taxi_zone',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT *\n FROM bronze.taxi_zone;\n\n SELECT * from silver.taxi_zone\n WHERE LocationID = 43;\n\n -- DROP EXTERNAL TABLE silver.taxi_zone;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- Read data from single Parquet file\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/part-00000-tid-6133789922049958496-2e489315-890a-4453-ae93-a104be9a6f06-106-1-c000.snappy.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n-- Read data from all parquet files\n\nSELECT Top 100 *\nFROM OPENROWSET(\n    BULK 'trip_data_green_parquet/year=*/month=*/*',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'PARQUET'\n) AS [result]\n\n-- Read data from selected parquet files\nSELECT Top 100 \nresult.filename() AS Parquet_File,\nresult.filepath(1) AS YEAR,\nresult.filepath(2) AS MONTH,\nCOUNT(1) as record_count\nFROM OPENROWSET(\n    BULK 'trip_data_green_parquet/year=*/month=*/*',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'PARQUET'\n) AS [result]\nWHERE result.filepath(1) = '2020'AND result.filepath(2) IN('02', '09', '06')\nGROUP BY result.filename(), result.filepath(1), result.filepath(2)\nORDER BY result.filename(), result.filepath(1), result.filepath(2);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_sp_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/sp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert csv -> parquet vendor\n-- create stored procedure\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_vendor\nAS\nBEGIN\n    IF OBJECT_ID('silver.vendor') IS NOT NULL\n        DROP EXTERNAL TABLE silver.vendor;\n    CREATE EXTERNAL TABLE silver.vendor\n    WITH(\n     LOCATION = 'silver/vendor',\n     DATA_SOURCE = nyc_taxi_src,\n     FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT * \nFROM bronze.vendor; \nEND;\n\nSELECT * FROM silver.vendor;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert csv -> parquet calendar\nCREATE EXTERNAL TABLE silver.calendar\nWITH(\n    LOCATION = 'silver/calendar',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT * \nFROM bronze.calendar;\n\nSELECT TOP 100 * FROM silver.calendar;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_trip_data_green_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- Read data from Delta file\nselect TOP 100 *\nfrom OPENROWSET(\n    BULK 'trip_data_green_delta/',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'DELTA'\n) AS trip_data;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_sp_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/sp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert json -> parquet rate_code\n-- create stored procedure\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_rate_code\nAS\nBEGIN\n    IF OBJECT_ID('silver.rate_code') IS NOT NULL\n        DROP EXTERNAL TABLE silver.rate_code;\n    CREATE EXTERNAL TABLE silver.rate_code\n    WITH(\n     LOCATION = 'silver/rate_code',\n     DATA_SOURCE = nyc_taxi_src,\n     FILE_FORMAT = parquet_file_format\n)\n AS\n SELECT *\n  FROM OPENROWSET(\n       BULK 'raw/rate_code.json',\n       DATA_SOURCE = 'nyc_taxi_src',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0b'\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n  );\n  END;\n\n  SELECT * FROM silver.rate_code;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_check_for_duplicates')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- Check for duplicates in taxi_zone\nselect LocationID,\ncount(1) AS number_of_records\nfrom \n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n)\nWITH (\n    LocationID SMALLINT ,\n    Borough VARCHAR(15) ,\n    Zone VARCHAR(50),\n    service_zone VARCHAR(15)\n) AS [result]\nGROUP BY LocationID\nHAVING COUNT(1) > 1;\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert csv -> parquet vendor\nCREATE EXTERNAL TABLE silver.vendor\nWITH(\n    LOCATION = 'silver/vendor',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT * \nFROM bronze.vendor; \n\nSELECT * FROM silver.vendor;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_sp_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/sp"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert json -> parquet rate_code\n-- create stored procedure\nCREATE OR ALTER PROCEDURE silver.sp_silver_payment_type\nAS\nBEGIN\n    IF OBJECT_ID('silver.payment_type') IS NOT NULL\n        DROP EXTERNAL TABLE silver.payment_type;\nCREATE EXTERNAL TABLE silver.payment_type\nWITH(\n    LOCATION = 'silver/payment_type',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT payment_type, Description\n  FROM OPENROWSET(\n       BULK 'raw/payment_type.json',\n       DATA_SOURCE = 'nyc_taxi_src',\n       FORMAT = 'CSV',\n       PARSER_VERSION = '1.0',\n       FIELDTERMINATOR = '0x0b',\n       FIELDQUOTE = '0x0b',\n       ROWTERMINATOR = '0x0a'\n  )\n  WITH(\n    jsonDoc NVARCHAR(MAX)\n  ) as payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(payment_type SMALLINT ,\n       Description VARCHAR(20) '$.payment_type_desc'\n  ) as join_table;\nEND;\n\n  SELECT * FROM silver.payment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- create external table as select (CETAS) to convert csv -> parquet trip_type\n\nCREATE EXTERNAL TABLE silver.trip_type\nWITH(\n    LOCATION = 'silver/trip_type',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT * \nFROM bronze.trip_type;\n\nSELECT * FROM silver.trip_type;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_data_quality_checks')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- Identify any data quality issues in trip total amount\n\nSELECT\n    MIN(total_amount) as min_total_amount,\n    MAX(total_amount) as max_total_amount,\n    AVG(total_amount) as avg_total_amount,\n    COUNT(*) as total_records,\n    COUNT(total_amount) as not_null_total_records\n \nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n-- Find records with -ve amounts\nSELECT payment_type,\n       count(1) as total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nWHERE total_amount < 0\nGROUP BY payment_type\nORDER BY payment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Serverless cost control')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"content": {
					"query": "select * from sys.dm_external_data_processed;\n\nselect * from sys.configurations\nwhere name like 'Data Processed %';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}